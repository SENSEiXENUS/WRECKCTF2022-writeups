#! /usr/bin/env python3
import math
from pwn import *
from lpf import largest_prime_factor
import re
import threading
class solve:
      def __init__(self,ip: str,port: int):
          self.ip = ip
          self.port = port 
          self.server = remote(ip,port)
      @classmethod
      def lcm(cls,x: int,y: int) -> int:
          result: int = math.lcm(x,y)
          return result
      @classmethod
      def gcd(cls,x: int,y: int) -> int:
          result: int = math.gcd(x,y)
          return result
      @classmethod
      def greatestPrimeFactor(cls,x: int) -> int:
          result: int = largest_prime_factor(x)
          return result
      @classmethod
      def grepNumbers(cls,string: str):
          answer: list =re.findall(r"[0-9]{1,1000}",string)
          if len(answer) == 2:
             x,y = tuple(answer)
             return (x,y)
          else:
              x = tuple(answer)
              return (x)
      def recv(self) -> str:
          server = self.server
          string_received = server.recv().decode()
          return string_received
      def send(self,string: bytes) -> None:
          server = self.server
          server.sendline(string)
          print(f"[+] Result {string.decode()}")

def main():
    solver = solve("challs.n00bzunit3d.xyz",10203)
    flag_details = str(solver.recv())
    for i in range(0,101):
        if "n00bz" in flag_details:
            print(flag_details)
            break
        print(flag_details)
        details = flag_details.split("of 100")[1]
        numbers = solve.grepNumbers(details)
        if len(numbers) == 1:
            num1 = numbers[0]
        else:
            num1,num2 = numbers
        if "greatest prime" in details:
            print(f"[+]GCD: {num1}")
            number = solve.greatestPrimeFactor(int(num1))
            solver.send(str(number).encode())
        elif "least" in details:
              print(f"[+]lcm of {num1} and {num2}")
              number = solve.lcm(int(num1),int(num2))
              solver.send(str(number).encode())
        elif "greatest common" in details:
              print(f"[+]GCD of {num1} and {num2}")
              number = solve.gcd(int(num1),int(num2))
              solver.send(str(number).encode())
        flag_details = str(solver.recv())
if __name__ == '__main__':
    thread1 = threading.Thread(target=main())
    thread1.start()
    thread1.join()




